AWSTemplateFormatVersion: "2010-09-09"
Description: "This CloudFormation template creates a VPC, Subnets, Route Table, two EC2 instances, and a Load Balancer with the latest Ubuntu AMI."

Parameters:
  LatestUbuntuAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id"
    Description: "The latest Ubuntu AMI ID"

Resources:

  # VPC
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Internet Gateway
  MyIgw:
    Type: AWS::EC2::InternetGateway

  # Attach IGW to VPC
  MyAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVpc
      InternetGatewayId: !Ref MyIgw

  # Public Subnet in AZ 1 (us-east-1a)
  PublicSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true

  # Public Subnet in AZ 2 (us-east-1b)
  PublicSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true

  # Route Table for Public Subnet
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc

  # Route for Internet Access
  MyRoute:
    Type: AWS::EC2::Route
    DependsOn: MyAttachGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIgw

  # Associate Route Table with Public Subnet AZ1
  RouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZ1
      RouteTableId: !Ref MyRouteTable

  # Associate Route Table with Public Subnet AZ2
  RouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZ2
      RouteTableId: !Ref MyRouteTable

  # Security Group for EC2 Instances
  SecurityGroups:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable SSH and HTTP access"
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LBSecurityGroup

  # Security Group for Load Balancer
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ELB Security Group"
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # EC2 Instance 1 in Subnet AZ1
  MyInstance1:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: !Ref LatestUbuntuAmiId
      InstanceType: t2.micro
      KeyName: test-server
      SecurityGroupIds:
        - !Ref SecurityGroups
      SubnetId: !Ref PublicSubnetAZ1
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y apache2
          systemctl start apache2
          systemctl enable apache2
          echo "<h1>Hello from EC2 Instance 1 in us-east-1a</h1>" > /var/www/html/index.html

  # EC2 Instance 2 in Subnet AZ2
  MyInstance2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1b
      ImageId: !Ref LatestUbuntuAmiId
      InstanceType: t2.micro
      KeyName: test-server
      SecurityGroupIds:
        - !Ref SecurityGroups
      SubnetId: !Ref PublicSubnetAZ2
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y apache2
          systemctl start apache2
          systemctl enable apache2
          echo "<h1>Hello from EC2 Instance 2 in us-east-1b</h1>" > /var/www/html/index.html

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: "DemoAlb"
      SecurityGroups:
        - !Ref LBSecurityGroup
      Subnets:
        - !Ref PublicSubnetAZ1
        - !Ref PublicSubnetAZ2

  # Target Group for Load Balancer
  TargetGroups:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /
      VpcId: !Ref MyVpc
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref MyInstance1
        - Id: !Ref MyInstance2

  # Listener for Load Balancer
  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroups
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  LoadBalancerDNSName:
    Description: "DNS Name of the Load Balancer"
    Value: !GetAtt LoadBalancer.DNSName
# ----------------------------------------------------------

AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to create a VPC, Subnets, Route Table, EC2 Instances, and a Load Balancer dynamically."

Parameters:
  LatestUbuntuAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id"
    Description: "The latest Ubuntu AMI ID from SSM Parameter Store"

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t2.small
      - t3.small
    Description: "EC2 instance type"

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing EC2 KeyPair to enable SSH access"

  VpcCidr:
    Type: String
    Default: 10.1.0.0/16
    Description: "CIDR block for the VPC"

  PublicSubnet1Cidr:
    Type: String
    Default: 10.1.1.0/24
    Description: "CIDR block for the first public subnet"

  PublicSubnet2Cidr:
    Type: String
    Default: 10.1.2.0/24
    Description: "CIDR block for the second public subnet"

  LoadBalancerName:
    Type: String
    Default: DemoAlb
    Description: "Name of the load balancer"

Resources:

  # VPC
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Internet Gateway
  MyIgw:
    Type: AWS::EC2::InternetGateway

  # Attach IGW to VPC
  MyAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVpc
      InternetGatewayId: !Ref MyIgw

  # Public Subnet in AZ 1 (us-east-1a)
  PublicSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true

  # Public Subnet in AZ 2 (us-east-1b)
  PublicSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true

  # Route Table for Public Subnets
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc

  # Route for Internet Access
  MyRoute:
    Type: AWS::EC2::Route
    DependsOn: MyAttachGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIgw

  # Associate Route Table with Public Subnets
  RouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZ1
      RouteTableId: !Ref MyRouteTable

  RouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZ2
      RouteTableId: !Ref MyRouteTable

  # Security Group for EC2 Instances
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH and HTTP access"
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Security Group for Load Balancer
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for the Load Balancer"
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # EC2 Instance 1
  MyInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestUbuntuAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref PublicSubnetAZ1
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y apache2
          systemctl start apache2
          systemctl enable apache2
          echo "<h1>Hello from EC2 Instance 1 in us-east-1a $(hostname -f)</h1>" > /var/www/html/index.html

  # EC2 Instance 2
  MyInstance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestUbuntuAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref PublicSubnetAZ2
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y apache2
          systemctl start apache2
          systemctl enable apache2
          echo "<h1>Hello from EC2 Instance 2 in us-east-1b $(hostname -f)</h1>" > /var/www/html/index.html

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Ref LoadBalancerName
      SecurityGroups:
        - !Ref LBSecurityGroup
      Subnets:
        - !Ref PublicSubnetAZ1
        - !Ref PublicSubnetAZ2

  # Target Group for Load Balancer
  TargetGroups:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /
      VpcId: !Ref MyVpc
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref MyInstance1
        - Id: !Ref MyInstance2

  # Listener for Load Balancer
  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroups
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  VpcIdOutput:
    Description: "VPC ID"
    Value: !Ref MyVpc
    Export:
      Name: VpcId

  PublicSubnet1IdOutput:
    Description: "Public Subnet 1 ID"
    Value: !Ref PublicSubnetAZ1
    Export:
      Name: PublicSubnet1Id

  PublicSubnet2IdOutput:
    Description: "Public Subnet 2 ID"
    Value: !Ref PublicSubnetAZ2
    Export:
      Name: PublicSubnet2Id

  LoadBalancerDNSName:
    Description: "DNS Name of the Load Balancer"
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: LoadBalancerDNS



